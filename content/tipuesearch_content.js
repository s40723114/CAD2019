var tipuesearch = {"pages": [{'title': 'About', 'text': '此內容管理系統以\xa0 https://github.com/mdecourse/cmsimde \xa0作為 submodule 運作, 可以選定對應的版本運作, cmsimde 可以持續改版, 不會影響之前設為 submodule, 使用舊版 cmsimde 模組的內容管理相關運作. \n 利用 cmsimde 建立靜態網誌方法: \n 1. 在 github 建立倉儲, git clone 到近端 \n 2. 參考\xa0 https://github.com/mdecourse/newcms , 加入除了 cmsimde 目錄外的所有內容 \n 以 git submodule add\xa0 https://github.com/mdecourse/cmsimde \xa0cmsimde \n 建立 cmsimde 目錄, 並從 github 取下子模組內容. \n 3.在近端維護時, 更換目錄到倉儲中的 cmsimde, 以 python wsgi.py 啟動近端網際伺服器. \n 動態內容編輯完成後, 以 generate_pages 轉為靜態內容, 以 git add commit 及 push 將內容推到遠端. \n 4. 之後若要以 git clone 取下包含 submodule 的所有內容, 執行: \n git clone --recurse-submodules  https://github.com/mdecourse/newcms.git \n', 'tags': '', 'url': 'About.html'}, {'title': 'Develop', 'text': 'https://github.com/mdecourse/cmsimde \xa0的開發, 可以在一個目錄中放入 cmsimde, 然後將 up_dir 中的內容放到與 cmsimde 目錄同位階的地方, 使用 command 進入 cmsimde 目錄, 執行 python wsgi.py, 就可以啟動, 以瀏覽器 https://localhost:9443\xa0就可以連接, 以 admin 作為管理者密碼, 就可以登入維護內容. \n cmsimde 的開發採用 Leo Editor, 開啟 cmsimde 目錄中的 cmsimde.leo 就可以進行程式修改, 結束後, 若要保留網際內容, 只要將 cmsimde 外部的內容倒回 up_dir 目錄中即可後續對 cmsimde 遠端倉儲進行改版. \n init.py 位於\xa0 up_dir 目錄, 可以設定 site_title 與 uwsgi 等變數. \n', 'tags': '', 'url': 'Develop.html'}, {'title': '每週練習內容', 'text': '\n', 'tags': '', 'url': '每週練習內容.html'}, {'title': 'week2', 'text': '建立cmsimde網站 \n \n \n', 'tags': '', 'url': 'week2.html'}, {'title': 'week3', 'text': 'solvespace 編譯 \n \n', 'tags': '', 'url': 'week3.html'}, {'title': 'week5', 'text': 'solvespace軟體操作(1) \n \n solvespace軟體操作(2) \n \n \n', 'tags': '', 'url': 'week5.html'}, {'title': 'week6', 'text': '利用solvespace繪製自走車零組件及組立 \n \n \n 利用V-REP模擬環境進行自走車控制 \n \n', 'tags': '', 'url': 'week6.html'}, {'title': 'week7', 'text': '繪圖驗證第8題 \n \n \n 繪圖驗證第11題 \n \n', 'tags': '', 'url': 'week7.html'}, {'title': 'NX12', 'text': '', 'tags': '', 'url': 'NX12.html'}, {'title': 'NX 說明', 'text': 'NX 12 for Engineering Design \n http://mde.tw/cad2019/downloads/NX-12-for-Engineering-Design.pdf \n 前言 \n \n NX是Siemens PLM Software提供的世界上最先進且緊密集成的CAD / CAM / CAE產品開發解決方案之一。 NX涵蓋了整個產品開發範圍，可為各種規模的企業提供巨大的價值。 它簡化了複雜的產品開發，從而加快了將產品推向市場的過程 \n 第1章簡介 \n 現代製造環境可以通過提供的種類越來越多的產品，小批量和更高的質量在提高全球競爭的背景下的模式為特徵。除非行業以更高的質量，更低的成本和更短的交付時間推出新產品，否則它們就無法在全球競爭中生存。國際競爭激烈，技術工人的供應減少。 隨著計算能力的巨大變化和用於設計和生產的軟件工具的廣泛可用性，現在工程師都使用計算機輔助設計（CAD），計算機輔助製造（CAM）和計算機輔助工程（CAE）系統來自動化設計和生產過程。現在這些技術每天都用於各種不同的工程任務。 以下是產品實現過程中如何使用CAD，CAM和CAE技術的簡要說明。 \n CAD / CAM / CAE的定義 \n • 計算機輔助設計– CAD \n \xa0 \xa0 \xa0 CAD技術是涉及使用計算機系統協助創建，修改，分析和優化設計。 \n • 計算機輔助製造– CAM \n \xa0 \xa0 CAM技術涉及到計算機系統規劃管理，並與工廠的生產資源的控制通過計算機接口的製造業務。 \n • 計算機輔助工程– CAE \xa0 \xa0 CAE技術使用計算機系統來分析CAD創建的產品的功能，從而使設計人員可以模擬和研究產品的性能，從而可以優化和優化設計。 \n 這本原文書是針對有興趣學習如何使用NX 12設計機械零件和組件的學生和工程師編寫的。學習使用NX 12對於學習如何使用其他CAD系統（例如PRO-E和CATIA）也將非常有價值。\xa0 \n 第2章 介紹了從開始會話到熟悉NX的NX 12基本知識。通過練習基本功能（如打印，保存和退出）來佈局12。它還給出了簡短的描述坐標系圖層，各種工具箱和其他重要命令在後面的章節中使用。 \n 第3章 介紹了素描的概念。它描述瞭如何創建草圖並給出幾何和尺寸約束。從今天開始，本章非常重要組件的幾何形狀非常複雜，僅憑基本特徵很難建模。 \n 第4章 開始零件的實際設計和建模。它描述了不同的功能例如參考特徵，掃描特徵和原始特徵，以及如何使用這些特徵創建設計。對特徵執行各種特徵操作。 \n 第5章 中學習如何從零件模型創建工程圖。在本章中，我們通過添加視圖，標註零件圖紙尺寸來演示如何創建圖紙，以及修改圖形中的各種屬性，例如文本大小，箭頭大小和公差。 \n 第6章 介紹了裝配建模的概念及其術語。它描述了Top-向下建模和自下而上建模。我們將使用自下而上的模型進行組裝組件變成產品。 \n 第7章 介紹了自由格式建模。曲線和平滑曲面的建模方法將被演示。 \n 第8章 概述了NX 12中提供的Design Simulations的簡要介紹。 \n 第9章 將是在製造中實施設計模型的實時經驗加工環境。本章介紹工具的生成，驗證和模擬創建CNC（計算機數字代碼）以從多軸生產設計零件的路徑甚至先進的CNC機器。每章中使用的示例和練習問題都經過精心設計，以使它們最終得以應用組裝在本章中。由於這項獨特的功能，您應該保存所有的模型在每一章中都有創建。 \n', 'tags': '', 'url': 'NX 說明.html'}, {'title': 'NX12 操作影片', 'text': '\n', 'tags': '', 'url': 'NX12 操作影片.html'}, {'title': '心得', 'text': '在使用NX12的時候,一開始很不習慣,因為NX12為高階cad軟體,所以花了一些時間摸索,用完NX12發現它的功能很強大也很多,但操作起來也變得相當複雜,之前常用SOLID WORK,發現SOLID WORK用起來是比NX12好上手,但NX12功能較多,也較廣泛. \n', 'tags': '', 'url': '心得.html'}, {'title': 'webots', 'text': '', 'tags': '', 'url': 'webots.html'}, {'title': 'webots tutorial', 'text': '定義使用機制 \n DEF-USE機制允許在一個位置定義節點，並在場景樹的其他位置重用該定義。 這對於避免在世界文件中復制相同節點很有用。 此外，它還允許用戶同時修改多個對象。 它是這樣工作的：首先用定義字串標記節點。 然後，可以使用使用關鍵字將該節點的副本重用於其他地方。 只能編輯定義節點的字段，使用的字段從定義節點繼承，並且不能更改。 該機制取決於世界文件中節點的順序。 應在任何相應的使用節點之前定義節點。 \n \xa0 \n 我們之前用來定義球的兩個定義是多餘的。 現在，我們將使用使用定義機制將這兩個球合併為一次。 \n \n DEF-USE Mechanism \n \xa0 \n The DEF-USE mechanism allows to define a node in one place and to reuse that definition elsewhere in the scene tree. This is useful to avoid the duplication of identical nodes in world files. Moreover, it also allows users to modify several objects at the same time. Here is how it works: first a node is labeled with a DEF string. Then copies of this node can be reused elsewhere with the USE keyword. Only the fields of the DEF node can be edited, the fields of the USE inherit from the DEF node and cannot be changed. This mechanism is dependent on the order of the nodes in the world file. A DEF node should be defined before any corresponding USE node. \n \xa0The two Sphere definitions that we have used earlier to define the ball, are redundant. We will now merge these two Spheres into only once using the DEF-USE mechanism. \n 動手操作6：在場景樹視圖中選擇第一個球節點（球的子級）。 場景樹視圖的字段編輯器允許您輸入定義字串。 \n \xa0在此字段中輸入球_幾何。 \n 選擇邊界物體字段（包含第二個球節點），並通過右鍵單擊場景樹中的字段並在彈出的上下文菜單中選擇“刪除”條目來將其清空。 \n 然後，選擇邊界物體字段，然後單擊“添加”按鈕，然後在對話框中選擇 使用 / 球_幾何。 \n 結果如圖所示。 \n Hands-on #6 : Select the first Sphere node (the child of the Shape) in the scene tree view. The field editor of the scene tree view allows you to enter the DEF string. \n \xa0 \n Enter BALL_GEOMETRY in this field. \n Select the boundingObject field (containing the second Sphere node), and empty it by right clicking the field in the scene tree and choosing the Delete entry in the context menu that pops up. \n Then, select the boundingObject field and click on the Add button, and select the USE / BALL_GEOMETRY in the dialog box. \n The result is shown in this figure. \n \n 現在，更改第一個球節點的半徑字段也會修改其邊界物體。 \n \xa0為了方便起見，邊界物體字段還接受形狀節點（而不是直接接受球節點）。 如圖所示，也可以在形狀級別使用相同的使用定義機制。 到目前為止，最大的好處就是也可以直接將此形狀用於圖形目的。 後來，對於某些傳感器，該機制將變得非常有用。 \n Now, changing the radius field of the first Sphere node also modifies its boundingObject. \n \xa0For convenience, the boundingObject field accepts also the Shape node (rather than the Sphere node directly). It would be also possible to use the same DEF-USE mechanism at the Shape level as shown in this figure. For now the greatest benefit is being able to also use this Shape directly for graphical purposes. Later this mechanism will turn out to be very useful for some sensors. \n 動手練習7：使用定義機制的球節點（而不是直接使用形狀節點）創建具有相同參數的第二個球。 \n Hands-on #7 : Create a second ball with the same parameters but using the Shape node (rather than the Sphere node directly) for the DEF-USE mechanism. \n \xa0 \n 添加牆壁 \n \xa0 \n 為了驗證您的進度，請自己實施四面牆以包圍環境。 必須根據環境靜態定義牆壁。 要了解靜態和動態之間的區別，我們將定義的物體（球）放在地面上方。 如果“物理”節點為NULL，則在仿真過程中它將保持凍結狀態（靜態情況）。 如果物理場包含“物理”節點，則它將受重力作用（動態情況）。 \n \xa0在形狀級別而不是幾何級別，盡可能使用定義機制。 實際上，在固體節點的邊界物體字段中添加中間形狀節點更為方便。 實現牆的最佳幾何原語是框節點。 所有牆壁僅需定義一個形狀。 預期結果如圖所示。 \n \xa0實際操作＃8：添加四面牆，無需物理操作，僅使用“形狀”節點的一個定義。 \n \xa0 \n 添加牆壁 \n \xa0 \n 為了驗證您的進度，請自己實施四面牆以包圍環境。 必須根據環境靜態定義牆壁。 要了解靜態和動態之間的區別，我們將定義的物體（球）放在地面上方。 如果“物理”節點為NULL，則在仿真過程中它將保持凍結狀態（靜態情況）。 如果物理場包含“物理”節點，則它將受重力作用（動態情況）。 \n \xa0 \n 在形狀級別而不是幾何級別，盡可能使用定義機制。 實際上，在固體節點的邊界物體字段中添加中間形狀節點更為方便。 實現牆的最佳幾何原語是框節點。 所有牆壁僅需定義一個形狀。 預期結果如圖所示。 \n \xa0 \n 實際操作＃8：添加四面牆，無需物理操作，僅使用“形狀”節點的一個定義。 \n Add wall \n \n In order to verify your progression, implement by yourself four walls to surround the environment. The walls have to be defined statically to the environment. To understand the difference between static and dynamic, let\'s take a defined object (the ball) above the ground. If the Physics node is NULL, it will remain frozen in the air during the simulation (static case). If the physics field contains a Physics nodes, it will fall under the effect of gravity (dynamic case). \n \xa0 \n Use as much as possible the DEF-USE mechanism at the Shape level rather than at the Geometry level. Indeed it\'s more convenient to add an intermediate Shape node in the boundingObject field of the Solid node. The best Geometry primitive to implement the walls is the Box node. Only one Shape has to be defined for all the walls. The expected result is shown in this figure. \n \xa0 \n Hands-on #8: Add four walls without physics and using only one definition of the Shape node. \n \xa0 Solution: World File \n To compare your world with the solution, go to your files and find the folder named "my_first_simulation" created in Tutorial 1, then go to the "worlds" folder and open with a text editor the right world. This solution as the others is located in the solution directory. \n \n \xa0 \n \xa0效率 \n 剛體的模擬在計算上是昂貴的。 可以通過以下方法來提高仿真速度：最小化邊界對象的數量，最小化邊界對象之間的約束（有關下一個教程的約束的更多信息），並最大化WorldInfo.basicTimeStep字段。 在每個模擬中，必須在模擬速度和真實性之間找到一個折衷。 \n Efficiency \n The simulation of rigid bodies is computationally expensive. The simulation speed can be increased by minimizing the number of bounding objects, minimizing the constraints between them (more information about the constraints in the next tutorials), and maximizing the WorldInfo.basicTimeStep field. On each simulation, a trade-off has to be found between simulation speed and realism. \n 結論 \n 在本教程的最後，您將能夠基於剛體創建簡單的環境。 您可以從場景樹視圖添加節點並修改其字段。 您已經熟悉了“實體”，“物理”，“形狀”，“球體”和“盒子”節點。 您還看到了使用定義機制，該機制可減少場景樹的節點多餘。 \n conclusion \n At the end of this tutorial, you are able to create simple environments based on rigid bodies. You are able to add nodes from the scene tree view and to modify their fields. You have become acquainted with the Solid, Physics, Shape, Sphere and Box nodes. You also saw the DEF-USE mechanism that allows to reduce node redundancy of the scene tree. \n \xa0 \n \xa0 \n \xa0 \n', 'tags': '', 'url': 'webots tutorial.html'}, {'title': 'w15\xa0 鋼球機構運動模擬', 'text': '\n \n', 'tags': '', 'url': 'w15\xa0 鋼球機構運動模擬.html'}, {'title': 'Onshape', 'text': 'onshape是一個由solid work團隊發明出來的一套軟體,onshape最大的特色是它可以進行網路線上協同,就好像是solid work加上github的功能一樣,既能畫圖,又能進行版次管理,讓設計者在管理資料時,能夠更方便.. \n', 'tags': '', 'url': 'Onshape.html'}, {'title': 'w2a 查驗', 'text': '', 'tags': '', 'url': 'w2a 查驗.html'}, {'title': 'w15 First', 'text': '\n 心得 \n 在從學期初到現在,我學習到了很多繪圖套件的使用方法,還有WEBOT跟V-REP軟體之間的差異,也讓我知道了所謂的機械設計,也跟機電資有很大的關係,我知道自己還有很多不足的地方,但至少有在這門課學到一點東西,對於我未來再走機械這條路,還是有幫助的. \n', 'tags': '', 'url': 'w15 First.html'}, {'title': 'w16 second', 'text': '\n 心得: \n 在這次的查驗,知道自己許多的不足,還離機械設計有一段距離,但能夠成功地把畫的零件轉入V-REP,也是一個不錯的學習', 'tags': '', 'url': 'w16 second.html'}]};